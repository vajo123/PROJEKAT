#ifndef CPU_H
#define CPU_H

#include <systemc>
#include "../spec/readsrt.hpp"
#include "types.hpp"
#include "address.hpp"
#include "tlm_utils/tlm_quantumkeeper.h"
#include <opencv2/opencv.hpp>

using namespace std;
using namespace cv;
using namespace sc_core;

SC_MODULE(Cpu) {
public:
    SC_HAS_PROCESS(Cpu);
    Cpu(sc_module_name name, char* input_video, char* input_titl);
    tlm_utils::simple_initiator_socket<Cpu> s_cp_i0;
    tlm_utils::simple_initiator_socket<Cpu> s_cp_i1;
    
    sc_out<sc_dt::sc_logic> in_port0;
    sc_out<sc_dt::sc_logic> in_port1;
    sc_signal<sc_dt::sc_logic> sig0;
    sc_signal<sc_dt::sc_logic> sig1;
    
    int frame_count;
    unsigned long sum_fps;

    // Svaki od position ima 106 elemenata
    vector<sc_dt::sc_uint<16>> D0_possition = {0, 32, 96, 121, 329, 571, 811, 1019, 1029, 1190, 1351, 1451, 1595, 1619, 1631, 1643, 1796, 1972, 2084, 2260, 2420, 2612, 2788, 2964, 3156, 3332, 3492, 3528, 3588, 3688, 3748, 3848, 4008, 4368, 4608, 4800, 5008, 5216, 5392, 5568, 5776, 5984, 6048, 6224, 6432, 6608, 6880, 7088, 7296, 7504, 7751, 7959, 8167, 8375, 8567, 8791, 9111, 9335, 9559, 9767, 9872, 10025, 10130, 10202, 10222, 10240, 10360, 10547, 10679, 10849, 10969, 11105, 11265, 11435, 11486, 11591, 11778, 11829, 12033, 12153, 12297, 12473, 12633, 12717, 12837, 12942, 13062, 13194, 13398, 13530, 13706, 13838, 14006, 14063, 14210, 14275, 14403, 14573, 14833, 15037, 15261, 15448, 15708, 15895, 16155, 16342};
    vector<sc_dt::sc_uint<16>> D1_possition = {0, 60, 117, 153, 438, 763, 1086, 1390, 1408, 1624, 1840, 1961, 2171, 2199, 2213, 2225, 2435, 2682, 2834, 3081, 3309, 3594, 3841, 4088, 4354, 4601, 4829, 4885, 4975, 5107, 5203, 5335, 5563, 6091, 6414, 6661, 6946, 7212, 7440, 7668, 7953, 8238, 8295, 8542, 8827, 9055, 9416, 9701, 10005, 10271, 10623, 10889, 11155, 11440, 11725, 12048, 12485, 12789, 13093, 13359, 13509, 13740, 13865, 13955, 13979, 14007, 14175, 14435, 14603, 14843, 15011, 15211, 15439, 15679, 15755, 15899, 16159, 16239, 16533, 16701, 16883, 17130, 17358, 17470, 17638, 17774, 17942, 18124, 18390, 18572, 18800, 18968, 19193, 19259, 19459, 19555, 19745, 19985, 20321, 20621, 20925, 21165, 21525, 21765, 22140, 22380};
    vector<sc_dt::sc_uint<16>> D2_possition = {0, 88, 176, 225, 621, 1056, 1496, 1892, 1913, 2192, 2471, 2627, 2882, 2922, 2946, 2962, 3250, 3580, 3778, 4108, 4416, 4790, 5098, 5428, 5758, 6088, 6396, 6476, 6576, 6745, 6862, 7044, 7308, 7983, 8423, 8753, 9149, 9501, 9831, 10139, 10535, 10909, 10997, 11327, 11701, 12009, 12493, 12867, 13263, 13615, 14083, 14435, 14787, 15183, 15535, 15953, 16525, 16943, 17339, 17691, 17865, 18177, 18351, 18483, 18525, 18553, 18777, 19099, 19323, 19645, 19869, 20122, 20430, 20729, 20821, 21024, 21346, 21415, 21783, 21991, 22231, 22539, 22847, 22975, 23183, 23363, 23571, 23795, 24147, 24387, 24695, 24903, 25183, 25261, 25541, 25649, 25891, 26177, 26625, 27016, 27434, 27742, 28246, 28554, 29058, 29344};
    vector<sc_dt::sc_uint<16>> D3_possition = {0, 104, 224, 288, 768, 1312, 1864, 2368, 2400, 2715, 3065, 3275, 3598, 3652, 3679, 3699, 4063, 4471, 4735, 5143, 5527, 5983, 6367, 6751, 7159, 7567, 7951, 8041, 8179, 8389, 8539, 8764, 9100, 9999, 10527, 10959, 11439, 11895, 12303, 12687, 13143, 13623, 13719, 14127, 14607, 14991, 15591, 16071, 16575, 17031, 17619, 18075, 18507, 18987, 19419, 19947, 20643, 21147, 21651, 22107, 22338, 22702, 22933, 23089, 23137, 23177, 23465, 23881, 24169, 24585, 24873, 25159, 25559, 25949, 26049, 26305, 26721, 26825, 27293, 27563, 27869, 28269, 28669, 28831, 29101, 29321, 29591, 29879, 30329, 30635, 31035, 31305, 31668, 31780, 32143, 32276, 32588, 32978, 33536, 34030, 34534, 34950, 35570, 35970, 36590, 36980};
    vector<sc_dt::sc_uint<16>> D4_possition = {0, 84, 246, 327, 894, 1542, 2244, 2865, 2901, 3330, 3759, 4015, 4395, 4455, 4485, 4510, 4945, 5431, 5728, 6241, 6727, 7294, 7780, 8266, 8779, 9265, 9751, 9851, 10026, 10298, 10485, 10774, 11206, 12326, 13001, 13514, 14108, 14648, 15134, 15593, 16187, 16754, 16862, 17375, 17942, 18401, 19157, 19724, 20318, 20858, 21562, 22102, 22669, 23263, 23830, 24478, 25342, 25936, 26557, 27124, 27420, 27884, 28180, 28362, 28416, 28456, 28796, 29318, 29678, 30200, 30560, 30937, 31441, 31934, 32069, 32384, 32906, 33051, 33631, 33971, 34351, 34855, 35359, 35579, 35919, 36219, 36559, 36919, 37479, 37839, 38343, 38683, 39127, 39255, 39699, 39875, 40253, 40729, 41443, 42081, 42729, 43233, 43981, 44485, 45233, 45709};

protected:
    void sof();
    vector<sc_dt::sc_uint<16>> ddr;
    char* input_video;
    char* input_titl;

    int command;
    sc_dt::sc_logic tmp_sig0;
    sc_dt::sc_logic tmp_sig1;

    void matToVector(const cv::Mat&);
    cv::Mat vectorToMat(const vector<sc_dt::sc_uint<16>>&, int, int);
    vector<vector<vector<sc_dt::sc_uint<1>>>> loadMatrix(const string& );
    vector<sc_dt::sc_uint<1>> transformMatrixArray(const vector<vector<vector<sc_dt::sc_uint<1>>>>&, vector<sc_dt::sc_uint<16>>&);
    void stringToVector(const string&, vector<sc_dt::sc_uint<16>>&);
    vector<sc_dt::sc_uint<16>> splitText(const vector<sc_dt::sc_uint<16>>&, const vector<sc_dt::sc_uint<16>>&, int);
    int getStringWidth(vector<sc_dt::sc_uint<16>>, int);
};
#endif // CPU_H
